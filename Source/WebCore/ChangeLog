2022-02-22  Nikolas Zimmermann  <nzimmermann@igalia.com>

        [LBSE] Begin layer-aware RenderSVGTransformableContainer implementation
        https://bugs.webkit.org/show_bug.cgi?id=237024

        Reviewed by NOBODY (OOPS!).

        Create RenderSVGContainer based on the downstream LBSE implementation.

        This patch does not yet enable the creation of RenderSVGContainer
        renderers if LBSE is enabled, since the derived classes, such as
        RenderSVGHiddenContainer / RenderSVGViewportContainer / ..., are still
        missing in LBSE.

        Covered by existing tests, no change in behaviour.

        * Sources.txt: Add RenderSVGTransformableContainer.* to build.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isSVGTransformableContainer const):
        * rendering/svg/RenderSVGTransformableContainer.cpp: Added.
        (WebCore::RenderSVGTransformableContainer::RenderSVGTransformableContainer):
        (WebCore::associatedUseElement):
        (WebCore::RenderSVGTransformableContainer::extraContainerTranslation const):
        (WebCore::RenderSVGTransformableContainer::calculateViewport):
        (WebCore::RenderSVGTransformableContainer::layoutChildren):
        (WebCore::RenderSVGTransformableContainer::updateFromStyle):
        (WebCore::RenderSVGTransformableContainer::applyTransform const):
        (WebCore::RenderSVGTransformableContainer::styleWillChange):
        (WebCore::RenderSVGTransformableContainer::graphicsElement const):
        * rendering/svg/RenderSVGTransformableContainer.h: Added.
        * rendering/svg/SVGContainerLayout.cpp:
        (WebCore::SVGContainerLayout::transformToRootChanged):
        * svg/SVGElement.cpp: Create renderer for <g> elements in LBSE mode.
        (WebCore::createSVGLayerAwareElementSet):
        * svg/SVGGElement.cpp: Diteto.
        (WebCore::SVGGElement::createElementRenderer):

2022-02-22  Nikolas Zimmermann  <nzimmermann@igalia.com>

        [LBSE] Rename RenderSVGTransformableContainer -> LegacyRenderSVGTransformableContainer
        https://bugs.webkit.org/show_bug.cgi?id=237023

        Reviewed by Rob Buis.

        Following the established procedure: rename RenderSVGTransformableContainer -> LegacyRenderSVGTransformableContainer.
        In a follow-up patch RenderSVGTransformableContainer will be reintroduced for LBSE, inheriting from
        RenderSVGContainer instead of LegacyRenderSVGContainer.

        Covered by existing tests, no change in behaviour.

        * Sources.txt:
        * WebCore.xcodeproj/project.pbxproj:
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isLegacySVGTransformableContainer const):
        (WebCore::RenderObject::isSVGTransformableContainer const): Deleted.
        * rendering/svg/LegacyRenderSVGContainer.cpp:
        (WebCore::LegacyRenderSVGContainer::layout):
        * rendering/svg/LegacyRenderSVGContainer.h:
        * rendering/svg/LegacyRenderSVGTransformableContainer.cpp: Renamed from Source/WebCore/rendering/svg/RenderSVGTransformableContainer.cpp.
        (WebCore::LegacyRenderSVGTransformableContainer::LegacyRenderSVGTransformableContainer):
        (WebCore::LegacyRenderSVGTransformableContainer::calculateLocalTransform):
        (WebCore::LegacyRenderSVGTransformableContainer::graphicsElement):
        * rendering/svg/LegacyRenderSVGTransformableContainer.h: Renamed from Source/WebCore/rendering/svg/RenderSVGTransformableContainer.h.
        * rendering/svg/RenderSVGViewportContainer.h:
        * rendering/svg/SVGContainerLayout.cpp:
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::transformToRootChanged):
        * svg/SVGAElement.cpp:
        (WebCore::SVGAElement::createElementRenderer):
        * svg/SVGGElement.cpp:
        (WebCore::SVGGElement::createElementRenderer):
        * svg/SVGSwitchElement.cpp:
        (WebCore::SVGSwitchElement::createElementRenderer):
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::createElementRenderer):

2022-02-22  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] Switch media player to playbin3
        https://bugs.webkit.org/show_bug.cgi?id=236884

        Reviewed by Xabier Rodriguez-Calvar.

        With GStreamer 1.20 playbin3 is quite usable now, so give it a try as default playback
        engine during the 2.38 cycle. If one wants to opt out, set the WEBKIT_GST_USE_PLAYBIN2
        environment variable to 1.

        No new tests, covered by existing media layout tests.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::createGSTPlayBin):

2022-02-22  Nikolas Zimmermann  <nzimmermann@igalia.com>

        [LBSE] Activate LBSE for <rect> painting
        https://bugs.webkit.org/show_bug.cgi?id=236194

        Reviewed by Rob Buis.

        Finally activate LBSE for <rect> elements -- painting <rect> elements
        now works as expected in LBSE. Try using MiniBrowser and switch
        from legacy engine to LBSE and back -- this now works just fine and
        rebuilds the render tree / updates display.

        Covered by existing tests, no change in behaviour.

        * rendering/svg/SVGRenderTreeAsText.cpp:
        (WebCore::writeStyle):
        (WebCore::writeChildren):
        * svg/SVGRectElement.cpp:
        (WebCore::SVGRectElement::createElementRenderer):

2022-02-22  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] Initial MediaRecorder implementation
        https://bugs.webkit.org/show_bug.cgi?id=236558

        Reviewed by Xabier Rodriguez-Calvar.

        Add a MediaRecorder backend based on the GStreamer Transcoder library. We anticipate the
        scenario where the GstWebRTC backend might provide encoded streams to the recorder, in which
        case transcoding is required. The transcoder library can operate in pass-through as well.

        * CMakeLists.txt:
        * Modules/mediarecorder/MediaRecorder.cpp:
        (WebCore::MediaRecorder::isTypeSupported):
        (WebCore::MediaRecorder::createMediaRecorderPrivate):
        * Modules/mediarecorder/MediaRecorderProvider.cpp:
        (WebCore::MediaRecorderProvider::createMediaRecorderPrivate):
        (WebCore::MediaRecorderProvider::isSupported):
        * Modules/mediarecorder/MediaRecorderProvider.h:
        * loader/EmptyClients.cpp:
        * platform/GStreamer.cmake:
        * platform/graphics/gstreamer/GRefPtrGStreamer.cpp:
        (WTF::adoptGRef):
        (WTF::refGPtr<GstEncodingProfile>):
        (WTF::derefGPtr<GstEncodingProfile>):
        * platform/graphics/gstreamer/GRefPtrGStreamer.h:
        * platform/graphics/gstreamer/GStreamerRegistryScanner.cpp:
        (WebCore::GStreamerRegistryScanner::initializeEncoders):
        * platform/mediarecorder/MediaRecorderPrivateGStreamer.cpp: Added.
        (WebCore::MediaRecorderPrivateGStreamer::create):
        (WebCore::MediaRecorderPrivateGStreamer::MediaRecorderPrivateGStreamer):
        (WebCore::MediaRecorderPrivateGStreamer::~MediaRecorderPrivateGStreamer):
        (WebCore::MediaRecorderPrivateGStreamer::startRecording):
        (WebCore::MediaRecorderPrivateGStreamer::stopRecording):
        (WebCore::MediaRecorderPrivateGStreamer::fetchData):
        (WebCore::MediaRecorderPrivateGStreamer::pauseRecording):
        (WebCore::MediaRecorderPrivateGStreamer::resumeRecording):
        (WebCore::MediaRecorderPrivateGStreamer::mimeType const):
        (WebCore::MediaRecorderPrivateGStreamer::isTypeSupported):
        (WebCore::MediaRecorderPrivateGStreamer::containerProfile):
        (WebCore::MediaRecorderPrivateGStreamer::setSource):
        (WebCore::MediaRecorderPrivateGStreamer::setSink):
        (WebCore::MediaRecorderPrivateGStreamer::configureVideoEncoder):
        (WebCore::MediaRecorderPrivateGStreamer::preparePipeline):
        (WebCore::MediaRecorderPrivateGStreamer::processSample):
        (WebCore::MediaRecorderPrivateGStreamer::notifyEOS):
        * platform/mediarecorder/MediaRecorderPrivateGStreamer.h: Added.
        * platform/mediastream/gstreamer/GStreamerMediaStreamSource.cpp:
        (webkitMediaStreamSrcEnsureStreamCollectionPosted):
        (webkitMediaStreamSrcPadProbeCb):
        (webkitMediaStreamSrcSignalEndOfStream):
        * platform/mediastream/gstreamer/GStreamerMediaStreamSource.h:

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Hide PDF.js sidebar shown for long documents
        https://bugs.webkit.org/show_bug.cgi?id=236850

        Reviewed by Chris Dumez.

        Use the built-in PDF.js `#pagemode=none` parameter to do this: https://github.com/mozilla/pdf.js/wiki/Viewer-options

        * html/PDFDocument.cpp:
        (WebCore::PDFDocument::createDocumentStructure):

2022-02-22  Antti Koivisto  <antti@apple.com>

        [CSS container Queries] getComputedStyle should update style for invalid query containers
        https://bugs.webkit.org/show_bug.cgi?id=237038

        Reviewed by Darin Adler.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::hasValidStyleForProperty):

        We always need to update style inside a query container since a change to it may affect descendants.

2022-02-22  Kate Cheney  <katherine_cheney@apple.com>

        Authenticated encryption console logging causing performance regressions
        https://bugs.webkit.org/show_bug.cgi?id=236987
        <rdar://problem/89108253>

        Reviewed by Chris Dumez.

        No new tests. Behavior confirmed by existing crypto/subtle tests.

        For clients that use repeated unauthenticated AES encryption, console
        logging may cause perf issues. We should log the authenticated
        encryption warning once per context.

        * crypto/SubtleCrypto.cpp:
        (WebCore::SubtleCrypto::addAuthenticatedEncryptionWarningIfNecessary):
        * dom/ScriptExecutionContext.h:
        (WebCore::ScriptExecutionContext::hasLoggedAuthenticatedEncryptionWarning const):
        (WebCore::ScriptExecutionContext::setHasLoggedAuthenticatedEncryptionWarning):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Re-style PDF.js form fields to match PDFKit
        https://bugs.webkit.org/show_bug.cgi?id=237041

        Reviewed by Geoffrey Garen.

        Remove black border on :hover, only display light blue background on hover, display blue focusring on :focus.

        * Modules/pdfjs-extras/style-cocoa.css:
        (.annotationLayer :is():

2022-02-22  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Partial rollout of r289946, broke Netflix
        https://bugs.webkit.org/show_bug.cgi?id=237019
        <rdar://89261425>

        Reviewed by Eric Carlson.

        Adopting AVContentKeySupport for AVSampleBufferDisplayLayer broke Netflix playback on Cocoa
        ports. Disable that support by hard coding sampleBufferRenderersSupportKeySession() to
        return false.

        * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.mm:
        (WebCore::sampleBufferRenderersSupportKeySession):

2022-02-22  Tyler Wilcock  <tyler_w@apple.com>

        AX: Only compute ariaTreeRows for isTree() objects
        https://bugs.webkit.org/show_bug.cgi?id=236994

        Reviewed by Andres Gonzalez.

        We only expose AXPropertyName::ARIATreeRows for isTree() objects, but compute it for every object, which is wasteful.

        This patch also includes a drive-by fixing of setting AXPropertyName::IsTreeItem. Prior to this patch,
        we never set this property. Also, we now only store AXPropertyName::ARIATreeItemContent for isTreeItem() objects.

        The AXPropertyName::IsTreeItem fix makes test accessibility/roles-exposed.html closer to passing with ITM enabled.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::ariaTreeRows):
        Remove unncessary tab character.
        * accessibility/isolatedtree/AXIsolatedObject.cpp:
        (WebCore::AXIsolatedObject::initializeAttributeData):

2022-02-22  Tyler Wilcock  <tyler_w@apple.com>

        AX: Fix accessibility/aria-current-state-changed-notification.html in isolated tree mode
        https://bugs.webkit.org/show_bug.cgi?id=237014

        Reviewed by Chris Fleizach.

        We need to update AXPropertyName::CurrentValue when we get a AXCurrentStateChanged notification.

        Fixes accessibility/aria-current-state-changed-notification.html in isolated tree mode.

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::updateIsolatedTree):
        * accessibility/isolatedtree/AXIsolatedTree.cpp:

2022-02-22  Andres Gonzalez  <andresg_22@apple.com>

        Fix for crash in several AX LayoutTests in isolated tree mode.
        https://bugs.webkit.org/show_bug.cgi?id=237015

        Reviewed by Chris Dumez.

        Follow up to https://bugs.webkit.org/show_bug.cgi?id=236748.

        The iteration over the object's children has to happen over a copy
        because the children vector can change during the traversal of the tree.

        * accessibility/isolatedtree/AXIsolatedTree.cpp:
        (WebCore::AXIsolatedTree::collectNodeChangesForSubtree):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Make pointer-events checks for SVG take in account inert subtrees
        https://bugs.webkit.org/show_bug.cgi?id=235836

        Reviewed by Antti Koivisto.

        Re-using visibleToHitTesting in SVG code isn't possible, because visibleToHitTesting removes visibility: hidden;
        content from hit-testing, which we do not want to here, since pointer-events has values for SVG which still
        allow clicking content regardless of their visibility value (pointer-events: painted/fill/stroke/all).

        Instead, we add an inert-aware effectivePointerEvents, similar to effectiveUserSelect and re-use that across the codebase.

        Tests: imported/w3c/web-platform-tests/html/semantics/interactive-elements/the-dialog-element/inert-svg-hittest.html
               imported/w3c/web-platform-tests/inert/inert-svg-hittest.tentative.html

        * rendering/RenderElement.cpp:
        (WebCore::RenderElement::styleWillChange):
        * rendering/RenderElement.h:
        (WebCore::RenderElement::visibleToHitTesting const):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::layerStyleChanged):
        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::effectivePointerEvents const):
        * rendering/svg/LegacyRenderSVGModelObject.cpp:
        (WebCore::LegacyRenderSVGModelObject::checkIntersection):
        (WebCore::LegacyRenderSVGModelObject::checkEnclosure):
        * rendering/svg/LegacyRenderSVGShape.cpp:
        (WebCore::LegacyRenderSVGShape::nodeAtFloatPoint):
        * rendering/svg/RenderSVGImage.cpp:
        (WebCore::RenderSVGImage::nodeAtFloatPoint):
        * rendering/svg/RenderSVGModelObject.cpp:
        (WebCore::RenderSVGModelObject::checkIntersection):
        (WebCore::RenderSVGModelObject::checkEnclosure):
        * rendering/svg/RenderSVGShape.cpp:
        (WebCore::RenderSVGShape::nodeAtPoint):
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::nodeAtFloatPoint):
        * rendering/svg/SVGInlineTextBox.cpp:
        (WebCore::SVGInlineTextBox::nodeAtPoint):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Rename RenderStyle::userSelectIncludingInert to RenderStyle::effectiveUserSelect
        https://bugs.webkit.org/show_bug.cgi?id=237033

        Reviewed by Antti Koivisto.

        This naming is consistent with other properties (effectiveDisplay/Appearance/PointerEvents/etc.).

        * dom/Node.cpp:
        (WebCore::computeEditabilityFromComputedStyle):
        (WebCore::Node::canStartSelection const):
        * dom/Position.cpp:
        (WebCore::Position::nodeIsUserSelectNone):
        (WebCore::Position::nodeIsUserSelectAll):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::canMouseDownStartSelect):
        (WebCore::EventHandler::selectCursor):
        * page/Frame.cpp:
        (WebCore::Frame::rangeForPoint):
        * rendering/RenderElement.cpp:
        (WebCore::RenderElement::selectionBackgroundColor const):
        (WebCore::RenderElement::selectionColor const):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::calculateClipRects const):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::collectSelectionGeometriesInternal):
        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::effectiveUserSelect const):
        (WebCore::RenderStyle::userSelectIncludingInert const): Deleted.

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings
        https://bugs.webkit.org/show_bug.cgi?id=236989

        Reviewed by Youenn Fablet.

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings, since RuntimeEnabledFeatures is deprecated.

        * Modules/push-api/PushEvent.idl:
        * Modules/push-api/PushManager.idl:
        * Modules/push-api/PushMessageData.idl:
        * Modules/push-api/PushSubscription.idl:
        * Modules/push-api/PushSubscriptionChangeEvent.idl:
        * Modules/push-api/PushSubscriptionOptions.idl:
        * Modules/push-api/ServiceWorkerGlobalScope+PushAPI.idl:
        * Modules/push-api/ServiceWorkerRegistration+PushAPI.idl:
        * dom/Document.cpp:
        (WebCore::Document::suspend):
        (WebCore::Document::resume):
        (WebCore::Document::finishedParsing):
        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::matchRegistration):
        (WebCore::DocumentLoader::responseReceived):
        (WebCore::DocumentLoader::commitData):
        (WebCore::DocumentLoader::unregisterReservedServiceWorkerClient):
        (WebCore::DocumentLoader::loadMainResource):
        * page/NavigatorBase.cpp:
        (WebCore::NavigatorBase::serviceWorker):
        * page/NavigatorServiceWorker.idl:
        * page/RuntimeEnabledFeatures.h:
        (WebCore::RuntimeEnabledFeatures::pushAPIEnabled const): Deleted.
        (WebCore::RuntimeEnabledFeatures::setPushAPIEnabled): Deleted.
        (WebCore::RuntimeEnabledFeatures::serviceWorkerEnabled const): Deleted.
        (WebCore::RuntimeEnabledFeatures::setServiceWorkerEnabled): Deleted.
        * workers/service/ExtendableEvent.idl:
        * workers/service/ExtendableMessageEvent.idl:
        * workers/service/FetchEvent.idl:
        * workers/service/ServiceWorker.idl:
        * workers/service/ServiceWorkerClient.idl:
        * workers/service/ServiceWorkerClients.idl:
        * workers/service/ServiceWorkerContainer.idl:
        * workers/service/ServiceWorkerGlobalScope.idl:
        * workers/service/ServiceWorkerRegistration.idl:
        * workers/service/ServiceWorkerWindowClient.idl:

2022-02-22  Marcos Caceres  <marcos@marcosc.com>

        Permission API: handle non-fully active documents
        https://bugs.webkit.org/show_bug.cgi?id=236952

        Spec change:
        https://github.com/w3c/permissions/pull/365

        Reviewed by Youenn Fablet.

        Test: imported/w3c/web-platform-tests/permissions/non-fully-active.https.html

        * Modules/permissions/PermissionStatus.cpp:
        (WebCore::PermissionStatus::stateChanged):
        * Modules/permissions/Permissions.cpp:
        (WebCore::Permissions::query):

2022-02-22  Asumu Takikawa  <asumu@igalia.com>

        Initial support for Wasm/ESM-integration in the WebCore module loader
        https://bugs.webkit.org/show_bug.cgi?id=236268

        Reviewed by Yusuke Suzuki.

        Add initial WebAssembly script support for WebCore module loading. It
        does not yet support Wasm scripts in workers. Detection of Wasm
        modules is currently done by MIME type, not by import assertions.

        * Headers.cmake:
        * Modules/fetch/FetchResponse.cpp:
        (WebCore::FetchResponse::hasWasmMIMEType const):
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluateModule):
        * bindings/js/ScriptController.h:
        * bindings/js/ScriptModuleLoader.cpp:
        (WebCore::ScriptModuleLoader::evaluate):
        (WebCore::ScriptModuleLoader::notifyFinished):
        * bindings/js/ScriptModuleLoader.h:
        * bindings/js/WebAssemblyCachedScriptSourceProvider.h: Added.
        * bindings/js/WebAssemblyScriptSourceCode.h: Copied from Source/JavaScriptCore/parser/SourceProvider.cpp.
        (WebCore::WebAssemblyScriptSourceCode::WebAssemblyScriptSourceCode):
        (WebCore::WebAssemblyScriptSourceCode::jsSourceCode const):
        * platform/MIMETypeRegistry.cpp:
        (WebCore::MIMETypeRegistry::isSupportedWebAssemblyMIMEType):
        * platform/MIMETypeRegistry.h:
        * workers/WorkerOrWorkletScriptController.cpp:
        (WebCore::WorkerOrWorkletScriptController::evaluateModule):
        * workers/WorkerOrWorkletScriptController.h:

2022-02-22  Pablo Saavedra  <psaavedra@igalia.com>

        Properly uninitialize EGL display before termination
        https://bugs.webkit.org/show_bug.cgi?id=236766

        From the docs [1], if contexts or surfaces associated with display
        is current to any thread, they are not released until they
        are no longer current as a result of eglMakeCurrent.

        So call eglMakeCurrent() to such effect.

        [1] https://www.khronos.org/registry/EGL/sdk/docs/man/html/eglMakeCurrent.xhtml

        Reviewed by Carlos Garcia Campos.

        * platform/graphics/PlatformDisplay.cpp:
        (WebCore::PlatformDisplay::terminateEGLDisplay):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events
        https://bugs.webkit.org/show_bug.cgi?id=236985

        Reviewed by Darin Adler.

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events,
        by keeping track of window objects interested in storage events. A Window object is interested
        in storage events if both of the following conditions is true:
        1. It has a Storage object (either localStorage or sessionStorage)
        2. It has a storage event listener registered.

        This patch also refactors the code so that we share more logic between WebKit1 and WebKit2.

        * inspector/agents/InspectorDOMStorageAgent.cpp:
        (WebCore::InspectorDOMStorageAgent::setDOMStorageItem):
        (WebCore::InspectorDOMStorageAgent::removeDOMStorageItem):
        (WebCore::InspectorDOMStorageAgent::clearDOMStorageItems):
        * loader/EmptyClients.cpp:
        * page/DOMWindow.cpp:
        (WebCore::windowsInterestedInStorageEvents):
        (WebCore::DOMWindow::forEachWindowInterestedInStorageEvents):
        (WebCore::DOMWindow::~DOMWindow):
        (WebCore::DOMWindow::willDetachDocumentFromFrame):
        (WebCore::DOMWindow::eventListenersDidChange):
        * page/DOMWindow.h:
        * page/DOMWindowProperty.h:
        * storage/Storage.cpp:
        (WebCore::Storage::setItem):
        (WebCore::Storage::removeItem):
        (WebCore::Storage::clear):
        * storage/StorageArea.h:
        * storage/StorageEventDispatcher.cpp:
        (WebCore::dispatchSessionStorageEventsToWindows):
        (WebCore::dispatchLocalStorageEventsToWindows):
        (WebCore::StorageEventDispatcher::dispatchSessionStorageEvents):
        (WebCore::StorageEventDispatcher::dispatchLocalStorageEvents):
        (WebCore::StorageEventDispatcher::dispatchSessionStorageEventsToFrames): Deleted.
        (WebCore::StorageEventDispatcher::dispatchLocalStorageEventsToFrames): Deleted.
        * storage/StorageEventDispatcher.h:

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Improve const correctness for SecurityOrigin accessors
        https://bugs.webkit.org/show_bug.cgi?id=236983

        Reviewed by Chris Dumez.

        * loader/SubresourceLoader.h:
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::origin const):
        (WebCore::CachedResource::origin):
        * loader/cache/CachedResourceRequest.h:
        (WebCore::CachedResourceRequest::origin const):
        (WebCore::CachedResourceRequest::origin):

2022-02-21  Brandon Stewart  <brandonstewart@apple.com>

        Ensure layer has backing during traversal
        https://bugs.webkit.org/show_bug.cgi?id=236858

        Reviewed by Simon Fraser.

        Ensure the layer has a backing attached to it before trying to append
        the node id.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::collectStationaryLayerRelatedOverflowNodes):

2022-02-21  Cameron McCormack  <heycam@apple.com>

        Make input element UA shadow tree creation lazy
        https://bugs.webkit.org/show_bug.cgi?id=236747

        Reviewed by Aditya Keerthi.

        We currently delay InputType creation for parser inserted elements until
        just after the attributes have been set, so that we don't wastefully
        create an InputType and the UA shadow tree creation if a non-text
        type="" was specified on the tag. We don't do anything similar for
        script inserted input elements. We could make the InputType creation
        lazy, but most of the wasted time is due to the shadow tree creation.

        This patch makes InputType shadow tree creation lazy by delaying it
        until one of the following happens:

        1. the element is inserted into the document
        2. the type="" or value="" attributes are changed before the element
           is inserted into the document
        3. any DOM methods that need access to the innerTextElement() are
           called on the element before the element is inserted into the
           document

        Not all places where we call innerTextElement() on the
        HTMLInputElement are safe to lazily create the shadow trees, so we
        have two accessors:

        - innerTextElement() returns the inner text element if it's been
          created already
        - innerTextElementCreatingShadowSubtreeIfNeeded will perform the lazy
          shadow tree construction if it hasn't already been done

        Since the existing
        createShadowSubtreeAndUpdateInnerTextElementEditability function has
        more responsibility than just creating the subtree and ensuring the
        editability is set appropriately, it's renamed to a more manageable
        createShadowSubtree.

        This change is a 0.5% progression on Speedometer 2.

        Test: fast/forms/lazy-shadow-tree-creation.html

        * html/BaseDateAndTimeInputType.h:
        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::createShadowSubtree):
        (WebCore::BaseDateAndTimeInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/ColorInputType.h:
        * html/ColorInputType.cpp:
        (WebCore::ColorInputType::createShadowSubtree):
        (WebCore::ColorInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/FileInputType.h:
        * html/FileInputType.cpp:
        (WebCore::FileInputType::createShadowSubtree):
        (WebCore::FileInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/InputType.cpp:
        (WebCore::InputType::createShadowSubtree):
        (WebCore::InputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/RangeInputType.h:
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::createShadowSubtree):
        (WebCore::RangeInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/SearchInputType.h:
        * html/SearchInputType.cpp:
        (WebCore::SearchInputType::createShadowSubtree):
        (WebCore::SearchInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Renamed createShadowSubtreeAndUpdateInnerTextElementEditability to
        createShadowSubtree and remove the "isInnerTextElementEditable"
        argument, since we can ask the element() for its value if needed.
        createShadowSubtree is now also responsible for creating the shadow
        root.

        * html/TextFieldInputType.h:
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::createShadowSubtree):
        (WebCore::TextFieldInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Renamed. Ensure all shadow tree state is up to date now that it can be
        created later.

        * html/InputType.h:
        * html/InputType.cpp:
        (WebCore::InputType::createShadowSubtree):
        (WebCore::InputType::hasCreatedShadowSubtree const):
        New functions to create the shadow subtree if it hasn't been done
        already, and to query whether it's been done.

        * html/HTMLInputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::innerTextElementCreatingShadowSubtreeIfNeeded):
        * html/HTMLTextAreaElement.h:
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::innerTextElementCreatingShadowSubtreeIfNeeded):
        * html/HTMLTextFormControlElement.h:
        * html/InputType.h:
        * html/InputType.cpp:
        (WebCore::InputType::innerTextElementCreatingShadowSubtreeIfNeeded):
        New functions to first create the shadow subtree before returning
        innerTextElement(). HTMLTextAreaElement never lazily creates its
        shadow subtree and so just returns innerTextElement().

        * html/HTMLInputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Deleted. Just call through to m_inputType->createShadowTree()
        directly.

        (WebCore::HTMLInputElement::HTMLInputElement):
        (WebCore::HTMLInputElement::create):
        (WebCore::HTMLInputElement::initializeInputType):
        (WebCore::HTMLInputElement::updateType):
        Don't immediately create the shadow tree.

        (WebCore::HTMLInputElement::didFinishInsertingNode):
        Create the shadow subtree now that the element's been inserted. No
        need to call dataListMayHaveChanged since
        TextFieldInputType::createShadowSubtree will now do this.

        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::updateInnerTextValue):
        Ensure the shadow subtree is created since we need to poke at it.

        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::forwardEvent):
        Don't forward the event if the shadow tree hasn't been created yet.

        (WebCore::HTMLTextFormControlElement::setSelectionRange):
        Ensure the shadow tree has been created. This is needed if the
        selection APIs are called on the input element before it's inserted
        into the document.

        (WebCore::HTMLTextFormControlElement::visiblePositionForIndex const):
        Assert that the shadow tree has been created, since editing
        functionality should only be needed if the element's been inserted
        into the document.

        (WebCore::HTMLTextFormControlElement::setInnerTextValue):
        Ensure the shadow tree has been created.

        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::handleMouseDownEvent):
        (WebCore::RangeInputType::handleTouchEvent):
        (WebCore::RangeInputType::handleKeydownEvent):
        Ensure the shadow tree has been created in case the event will change
        the value.

        (WebCore::RangeInputType::sliderTrackElement const):
        Only return the element if it's been created.

        (WebCore::RangeInputType::typedSliderThumbElement const):
        Assert that the element has been created.

        (WebCore::RangeInputType::dataListMayHaveChanged):
        Only try to re-layout if the shadow tree has been created.

        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::isEmptyValue const):
        Avoid creating the shadow subtree.

        (WebCore::TextFieldInputType::forwardEvent):
        Move the element assertion up to be consistent with other functions.

        (WebCore::TextFieldInputType::innerTextElement const):
        Don't assert, since this now can legitimately return null.

        * html/FileInputType.cpp:
        (WebCore::FileInputType::disabledStateChanged):
        (WebCore::FileInputType::attributeChanged):
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::disabledStateChanged):
        (WebCore::RangeInputType::attributeChanged):
        (WebCore::RangeInputType::setValue):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::disabledStateChanged):
        (WebCore::TextFieldInputType::readOnlyStateChanged):
        (WebCore::TextFieldInputType::updatePlaceholderText):
        (WebCore::TextFieldInputType::updateAutoFillButton):
        (WebCore::TextFieldInputType::dataListMayHaveChanged):
        Don't update the shadow tree contents if it hasn't been created yet.
        createShadowTree is responsible for ensuring it creates the shadow
        tree contents reflecting the current state.

2022-02-21  Wenson Hsieh  <wenson_hsieh@apple.com>

        Add test coverage for the pasteboard writing codepath added in r289839
        https://bugs.webkit.org/show_bug.cgi?id=236944

        Reviewed by Aditya Keerthi.

        Add test coverage for the changes in r289839 in the case where `ENABLE(IMAGE_ANALYSIS_ENHANCEMENTS)` is turned
        on. To do this, we set the platform image analysis results to a new internal mock object,
        `FakeImageAnalysisResult`, that returns a string for a given NSRange. This code is then exercised by several
        existing layout tests that copy and paste text inside image overlays:

        - fast/images/text-recognition/image-overlay-line-wrapping.html
        - fast/images/text-recognition/image-overlay-text-without-leading-whitespace.html
        - fast/images/text-recognition/mac/copy-image-overlay-text-with-context-menu.html

        * testing/Internals.cpp:
        (WebCore::Internals::installImageOverlay):
        * testing/Internals.h:
        * testing/Internals.mm:
        (-[FakeImageAnalysisResult initWithString:]):
        (-[FakeImageAnalysisResult _attributedStringForRange:]):
        (WebCore::Internals::fakeImageAnalysisResultForTesting):

2022-02-21  Myles C. Maxfield  <mmaxfield@apple.com>

        Sort WebCore and WebKit Xcode project files
        https://bugs.webkit.org/show_bug.cgi?id=237010

        Unreviewed.

        No new tests because there is no behavior change.

        * WebCore.xcodeproj/project.pbxproj:

== Rolled over to ChangeLog-2022-02-22 ==
